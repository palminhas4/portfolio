---
title: "Semana 2: Modelagem de Dados para Portfólios Financeiros"
author: "CLAPS"
date: "2025-03-14"
format:
  html:
    code-fold: false
    theme: cosmo
    toc: true
    toc-depth: 3
    toc-title: "Sumário"
    fig-width: 10
    fig-height: 6
# bibliography: references.bib
execute:
  echo: true
  warning: false
  message: false
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

# 1. Introdução

Nesta aula, abordaremos um dos pilares fundamentais da modelagem quantitativa em finanças: a utilização de **dados financeiros** para a construção e análise de portfólios. Exploraremos três grandes abordagens no uso de **séries temporais financeiras**, focando principalmente na geração de dados sintéticos para nossa análise.

Para tal, exploraremos três grandes abordagens no uso de **séries temporais financeiras**:


**Obtenção de dados reais via APIs**
    -   Demonstramos como utilizar APIs públicas, como a do **Yahoo Finance**, para baixar dados históricos de ações e commodities, diretamente para o R ou Python.
    -   O objetivo é capacitar os alunos a construir **portfólios reais**, utilizando fontes públicas de dados financeiros.
**Geração de dados sintéticos**
    -   Introduzimos métodos para gerar **dados sintéticos**, como o **Movimento Browniano Geométrico (MGB)**, **distribuições lognormais**, **caminhos aleatórios com ruído gaussiano** e **redes adversariais generativas (GANs)**.
    -   O propósito desses métodos é fornecer alternativas para análise de portfólios quando não há dados reais disponíveis ou quando há restrições de privacidade e confidencialidade.

::: callout-note
**Por que isso é importante?** - Muitas vezes, dados reais são **incompletos, inconsistentes ou indisponíveis**, tornando essencial o conhecimento de técnicas de **simulação e modelagem de séries temporais**. - O aprendizado dessas abordagens permite aos alunos **tomar decisões informadas** sobre quais métodos utilizar na modelagem de portfólios financeiros, seja para análise de risco, previsão de preços ou otimização de carteiras.
:::

::: callout-tip
**Objetivo da aula** - Compreender as **vantagens e limitações** de cada uma dessas abordagens. - Desenvolver habilidades práticas na **obtenção e manipulação de dados financeiros**. - Implementar técnicas para **análise e simulação de portfólios**, combinando ferramentas do R e Python.
:::

# 2. Comparação dos Métodos de Geração de Dados Sintéticos

Cada uma das abordagens apresentadas para a geração de séries temporais sintéticas possui vantagens e desvantagens. A tabela a seguir compara os métodos discutidos:

| Método | Características | Vantagens | Desvantagens | Melhor Uso |
|---------------|---------------|---------------|---------------|---------------|
| Movimento Browniano Geométrico (MBG) | Baseado em um processo estocástico com retorno e volatilidade constantes | Simples de implementar e amplamente utilizado | Não captura mudanças de volatilidade e choques de mercado | Modelagem básica de preços de ativos financeiros |
| Distribuição Log-normal | Gera retornos diários e reconstrói preços sintéticos | Captura a distribuição empírica dos retornos | Não incorpora dependências temporais | Simulação de séries financeiras individuais |
| Ruído Gaussiano | Modela séries como processos de ruído branco com tendência | Fácil de calibrar | Não reflete efeitos de autocorrelação | Simulações de séries estacionárias e processos aleatórios |
| Processo de Heston | Modela volatilidade estocástica ao longo do tempo | Captura dinâmica realista de volatilidade | Complexidade computacional elevada | Precificação de opções e avaliação de risco |
| Processo de Ornstein-Uhlenbeck | Modela reversão à média | Adequado para ativos estacionários | Não reflete grandes variações de mercado | Modelagem de taxas de juros e commodities |
| Processo de Hawkes | Modela impactos repentinos e eventos exógenos | Captura choques de liquidez e "efeito manada" | Requer calibração cuidadosa | Análise de impacto de notícias no mercado |
| GANs (Redes Adversariais Generativas) | Redes neurais adversárias geram séries temporais | Capacidade de aprender padrões temporais complexos | Treinamento complexo e propenso a instabilidade | Geração de séries realistas para testes de modelos |
| Autoencoders Variacionais (VAE) | Compacta séries no espaço latente e reconstrói | Captura padrões de longo prazo | Pode perder variabilidade estocástica | Geração de séries sintéticas para análise de risco |
| TimeGAN | Aprendizagem profunda com memória temporal | Mantém padrões estatísticos | Alto custo computacional e necessidade de grande volume de dados | Modelagem realista de séries financeiras complexas |
| RNNs, LSTMs e GRUs | Modelos baseados em redes neurais recorrentes | Capturam dependências temporais e padrões ocultos | Treinamento complexo e demanda muitos dados | Simulação de séries financeiras com memória temporal |

# 3. Nossa Escolha: Movimento Browniano Geométrico (MBG)

## 3.1 Justificativa da Escolha

Após analisar os diversos métodos de geração de dados sintéticos apresentados na tabela, optamos pelo **Movimento Browniano Geométrico (MBG)** pelos seguintes motivos:

1.  **Simplicidade e Eficiência**: O MBG é um método relativamente simples de implementar, mas ainda assim eficaz para gerar séries temporais financeiras sintéticas.

2.  **Base Teórica Sólida**: Fundamentado na teoria financeira clássica, é amplamente aceito como um modelo padrão para simulação de preços de ativos.

3.  **Adequação para Portfólios**: É particularmente adequado para modelar preços de ações e outros ativos financeiros no longo prazo.

4.  **Reprodutibilidade**: Permite gerar múltiplas simulações com parâmetros consistentes, facilitando testes de robustez.

5.  **Menor Complexidade Computacional**: Comparado com modelos como GANs, TimeGAN, ou Processo de Heston, o MBG requer significativamente menos recursos computacionais.

## 3.2 Por que não escolhemos outros métodos?

-   **GANs e TimeGAN**: Embora capturem padrões complexos, exigem treinamento extensivo, grandes volumes de dados e são computacionalmente intensivos.

-   **Processo de Heston**: Apesar de modelar volatilidade estocástica de forma realista, apresenta complexidade matemática e computacional elevada.

-   **Autoencoders Variacionais**: Podem perder informações importantes sobre a variabilidade estocástica dos dados financeiros.

-   **RNNs e LSTMs**: Necessitam de grandes volumes de dados para treinamento e podem ser excessivamente complexos para o escopo atual.

# 4. Implementação do Movimento Browniano Geométrico

Primeiramente, carregamos os pacotes necessários:

```{r load-packages}
# Instalar pacotes se necessário
if (!require("quantmod")) install.packages("quantmod")
if (!require("PerformanceAnalytics")) install.packages("PerformanceAnalytics")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("reshape2")) install.packages("reshape2")
if (!require("corrplot")) install.packages("corrplot")
if (!require("dplyr")) install.packages("dplyr")

# Carregar pacotes
library(quantmod)
library(PerformanceAnalytics)
library(ggplot2)
library(reshape2)
library(corrplot)
library(dplyr)
```

## 4.1 Coleta de dados reais para estimativa de parâmetros

Vamos baixar dados históricos para estimar os parâmetros necessários para o modelo MBG:

```{r get-data}
# Definir tickers da carteira
tickers <- c("NVDA", "AAPL", "TSLA", "META", "AMZN", "MSFT")

# Definir período para coleta
end_date <- Sys.Date()
start_date <- end_date - 365*2  # 2 anos para estimar parâmetros

# Baixar dados históricos
getSymbols(tickers, from = start_date, to = end_date, src = "yahoo")

# Extrair preços de fechamento ajustados
prices <- do.call(merge, lapply(tickers, function(ticker) {
  Cl(get(ticker))
}))
colnames(prices) <- tickers

# Visualizar os primeiros registros
head(prices)
```

## 4.2 Calcular retornos e estimar parâmetros

```{r calculate-returns}
# Calcular retornos diários
returns <- na.omit(Return.calculate(prices, method = "log"))

# Calcular parâmetros para o MBG
mu <- colMeans(returns) * 252  # Drift anualizado
sigma <- apply(returns, 2, sd) * sqrt(252)  # Volatilidade anualizada

# Exibir parâmetros estimados
data.frame(ticker = tickers, mu = mu, sigma = sigma)
```

## 4.3 Implementação do MBG em R

```{r mbg-function}
# Função otimizada para gerar séries temporais sintéticas usando MBG
generate_gbm_optimized <- function(S0, mu, sigma, T = 1, N = 252, seed = NULL) {
  # Parâmetros:
  # S0: Vetor de preços iniciais
  # mu: Vetor de drifts (retornos médios anualizados)
  # sigma: Vetor de volatilidades anualizadas
  # T: Horizonte de tempo em anos (padrão: 1 ano)
  # N: Número de dias de trading (padrão: 252 dias úteis)
  # seed: Semente para reprodutibilidade (opcional)
  
  # Validação de entrada
  if (length(S0) != length(mu) || length(mu) != length(sigma)) {
    stop("Os vetores S0, mu e sigma devem ter o mesmo comprimento")
  }
  
  # Definir semente se fornecida
  if (!is.null(seed)) set.seed(seed)
  
  # Número de ativos
  n_assets <- length(S0)
  
  # Converter parâmetros para escala diária
  dt <- T/N
  mu_daily <- mu
  sigma_daily <- sigma
  
  # Inicializar matriz de preços
  prices <- matrix(0, nrow = N+1, ncol = n_assets)
  prices[1,] <- S0
  
  # Pré-computar termos que não mudam no loop
  drift_term <- (mu_daily - 0.5 * sigma_daily^2) * dt
  vol_term <- sigma_daily * sqrt(dt)
  
  # Usar vectorização para maior eficiência
  for (i in 1:n_assets) {
    # Gerar números aleatórios de uma vez
    Z <- rnorm(N, 0, 1)
    
    # Calcular incrementos logarítmicos cumulativos
    log_returns <- cumsum(drift_term[i] + vol_term[i] * Z)
    
    # Converter para preços
    prices[2:(N+1), i] <- S0[i] * exp(log_returns)
  }
  
  # Criar datas para simulação (dias úteis)
  today <- Sys.Date()
  future_dates <- seq(today, by = "day", length.out = N*2)  # Dias extras para compensar fins de semana
  
  # Filtrar apenas dias úteis (segunda a sexta)
  weekdays_only <- future_dates[!weekdays(future_dates) %in% c("Saturday", "Sunday")]
  future_dates <- weekdays_only[1:(N+1)]  # Pegar apenas o número necessário de dias
  
  # Criar xts object
  library(xts)
  synthetic_prices <- xts(prices, order.by = future_dates)
  
  # Nomes das colunas
  if (!is.null(names(S0))) {
    colnames(synthetic_prices) <- names(S0)
  } else {
    colnames(synthetic_prices) <- paste0("Asset", 1:n_assets)
  }
  
  return(synthetic_prices)
}

# Exemplo de uso
# Configuração dos parâmetros
tickers <- c("NVDA", "AAPL", "TSLA", "META", "AMZN", "MSFT")
S0 <- c(30.5, 68.2, 27.8, 173.4, 305.2, 130.1)  # Preços iniciais
names(S0) <- tickers
mu <- c(0.10, 0.08, 0.05, 0.12, 0.09, 0.11)  # Retornos anualizados
names(mu) <- tickers
sigma <- c(0.30, 0.25, 0.20, 0.28, 0.22, 0.35)  # Volatilidades anualizadas
names(sigma) <- tickers

# Gerar preços sintéticos
synthetic_prices <- generate_gbm_optimized(S0, mu, sigma, T = 1, N = 252, seed = 123)

# Visualizar os primeiros registros
head(synthetic_prices)

# Calcular retornos
synthetic_returns <- na.omit(Return.calculate(synthetic_prices, method = "log"))

```

## 4.4 Gerar e analisar dados sintéticos

```{r generate-synthetic}
# Parâmetros para simulação
T <- 1  # Horizonte de tempo (1 ano)
N <- 252  # Número de dias de trading em um ano
S0 <- as.numeric(last(prices))  # Preços iniciais
names(S0) <- tickers

# Gerar preços sintéticos
set.seed(123)  # Para reprodutibilidade
synthetic_prices <- generate_gbm_optimized(S0, mu, sigma, T, N)

# Visualizar os primeiros registros
head(synthetic_prices)

# Calcular retornos dos preços sintéticos
synthetic_returns <- na.omit(Return.calculate(synthetic_prices, method = "log"))
```

## 4.5 Visualização dos preços sintéticos

```{r plot-prices, fig.width=10, fig.height=6}
# Converter para formato longo para ggplot
prices_long <- fortify(synthetic_prices)
prices_long <- melt(prices_long, id.vars = "Index")

# Plotar preços sintéticos
ggplot(prices_long, aes(x = Index, y = value, color = variable)) +
  geom_line() +
  labs(title = "Preços Sintéticos Gerados por Movimento Browniano Geométrico",
       x = "Data", y = "Preço", color = "Ativo") +
  theme_minimal() +
  theme(legend.position = "bottom")
```

## 4.6 Comparação das distribuições de retornos

```{r compare-distributions, fig.width=12, fig.height=8}
par(mfrow = c(3, 3))
for (ticker in tickers) {
  hist(returns[, ticker], breaks = 30, main = paste("Retornos Reais -", ticker),
       xlab = "Retorno", col = "lightblue", probability = TRUE)
  lines(density(returns[, ticker]), col = "red", lwd = 2)
  
  hist(synthetic_returns[, ticker], breaks = 30, main = paste("Retornos Sintéticos -", ticker),
       xlab = "Retorno", col = "lightgreen", probability = TRUE)
  lines(density(synthetic_returns[, ticker]), col = "blue", lwd = 2)
}
```

## 4.7 Análise de correlações

```{r correlations, fig.width=10, fig.height=10}
# Correlação dos retornos reais
cor_real <- cor(returns)

# Correlação dos retornos sintéticos
cor_synth <- cor(synthetic_returns)

# Visualizar matrizes de correlação
par(mfrow = c(1, 2))
corrplot(cor_real, method = "color", type = "upper", title = "Correlação Real",
         tl.col = "black", tl.srt = 45, addCoef.col = "black", number.cex = 0.7)

corrplot(cor_synth, method = "color", type = "upper", title = "Correlação Sintética",
         tl.col = "black", tl.srt = 45, addCoef.col = "black", number.cex = 0.7)
```

# 5. Otimização de Portfólio com Dados Sintéticos

Vamos utilizar os dados sintéticos para realizar uma otimização de portfólio usando a abordagem de Markowitz:

```{r portfolio-optimization}
# Converter retornos para matriz
returns_matrix <- as.matrix(synthetic_returns)

# Número de simulações
n_sim <- 5000

# Inicializar vetores para armazenar resultados
all_weights <- matrix(0, nrow = n_sim, ncol = length(tickers))
all_returns <- numeric(n_sim)
all_risks <- numeric(n_sim)
all_sharpe <- numeric(n_sim)

# Taxa livre de risco (considere ajustar conforme o mercado brasileiro)
risk_free <- 0.05

# Simulação de Monte Carlo para gerar carteiras aleatórias
set.seed(123)
for (i in 1:n_sim) {
  # Pesos aleatórios
  weights <- runif(length(tickers))
  weights <- weights / sum(weights)
  all_weights[i,] <- weights
  
  # Retorno do portfólio
  ret <- sum(weights * colMeans(returns_matrix) * 252)
  all_returns[i] <- ret
  
  # Risco do portfólio
  sd <- sqrt(t(weights) %*% (252 * cov(returns_matrix)) %*% weights)
  all_risks[i] <- sd
  
  # Índice de Sharpe
  sharpe <- (ret - risk_free) / sd
  all_sharpe[i] <- sharpe
}

# Criar data frame com os resultados
portfolios <- data.frame(return = all_returns, risk = all_risks, sharpe = all_sharpe)

# Encontrar a carteira com o maior índice de Sharpe
max_sharpe_idx <- which.max(all_sharpe)
optimal_weights <- all_weights[max_sharpe_idx,]
names(optimal_weights) <- tickers

# Exibir alocação ótima
data.frame(ticker = tickers, weight = optimal_weights * 100)
```

## 5.1 Visualização da Fronteira Eficiente

```{r efficient-frontier, fig.width=10, fig.height=6}
# Plotar a fronteira eficiente
ggplot(portfolios, aes(x = risk, y = return, color = sharpe)) +
  geom_point(alpha = 0.3) +
  geom_point(aes(x = all_risks[max_sharpe_idx], y = all_returns[max_sharpe_idx]), 
             color = "red", size = 5) +
  labs(title = "Fronteira Eficiente (Dados Sintéticos)",
       x = "Volatilidade (Risco)", y = "Retorno Esperado") +
  scale_color_viridis_c(name = "Índice de Sharpe") +
  theme_minimal() +
  annotate("text", x = all_risks[max_sharpe_idx] + 0.02, 
           y = all_returns[max_sharpe_idx], 
           label = "Portfólio Ótimo", color = "red")
```

# 6. Comparação com Dados Reais

Para validar nossa abordagem, vamos comparar os resultados de otimização usando dados sintéticos versus dados reais:

```{r real-optimization}
# Otimização com dados reais
real_returns_matrix <- as.matrix(returns)

# Inicializar vetores para armazenar resultados
all_weights_real <- matrix(0, nrow = n_sim, ncol = length(tickers))
all_returns_real <- numeric(n_sim)
all_risks_real <- numeric(n_sim)
all_sharpe_real <- numeric(n_sim)

# Simulação de Monte Carlo para gerar carteiras aleatórias
set.seed(123)
for (i in 1:n_sim) {
  # Utilizar os mesmos pesos da simulação anterior para comparação justa
  weights <- all_weights[i,]
  all_weights_real[i,] <- weights
  
  # Retorno do portfólio
  ret <- sum(weights * colMeans(real_returns_matrix) * 252)
  all_returns_real[i] <- ret
  
  # Risco do portfólio
  sd <- sqrt(t(weights) %*% (252 * cov(real_returns_matrix)) %*% weights)
  all_risks_real[i] <- sd
  
  # Índice de Sharpe
  sharpe <- (ret - risk_free) / sd
  all_sharpe_real[i] <- sharpe
}

# Encontrar a carteira com o maior índice de Sharpe
max_sharpe_idx_real <- which.max(all_sharpe_real)
optimal_weights_real <- all_weights_real[max_sharpe_idx_real,]
names(optimal_weights_real) <- tickers

# Comparar alocações ótimas
comparison <- data.frame(
  ticker = tickers,
  synthetic = optimal_weights * 100,
  real = optimal_weights_real * 100,
  difference = (optimal_weights - optimal_weights_real) * 100
)

comparison
```

## 6.1 Visualização da Comparação

```{r compare-portfolios, fig.width=10, fig.height=6}
# Converter para formato longo para ggplot
comparison_long <- melt(comparison, id.vars = "ticker", 
                        measure.vars = c("synthetic", "real"),
                        variable.name = "data_type", value.name = "weight")

# Plotar comparação
ggplot(comparison_long, aes(x = ticker, y = weight, fill = data_type)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Comparação das Alocações Ótimas",
       x = "Ativo", y = "Peso (%)", fill = "Tipo de Dados") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# 7. Avaliação da Qualidade dos Dados Sintéticos

Vamos avaliar a qualidade dos dados sintéticos comparando algumas estatísticas descritivas:

```{r quality-assessment}
# Função para calcular estatísticas descritivas
calculate_stats <- function(returns) {
  stats <- data.frame(
    mean = colMeans(returns) * 252,  # Retorno médio anualizado
    volatility = apply(returns, 2, sd) * sqrt(252),  # Volatilidade anualizada
    skewness = apply(returns, 2, skewness),  # Assimetria
    kurtosis = apply(returns, 2, kurtosis),  # Curtose
    VaR_95 = apply(returns, 2, function(x) quantile(x, 0.05))  # Value at Risk 95%
  )
  return(stats)
}

# Calcular estatísticas para retornos reais e sintéticos
real_stats <- calculate_stats(returns)
synth_stats <- calculate_stats(synthetic_returns)

# Calcular diferenças percentuais
diff_stats <- (synth_stats - real_stats) / abs(real_stats) * 100

# Exibir resultados
list(
  real_stats = real_stats,
  synthetic_stats = synth_stats,
  percentage_difference = diff_stats
)
```

# 8. Implementação

Esta análise foi conduzida exclusivamente em R devido à sua robustez e simplicidade para modelagem financeira. A implementação em outras linguagens, como Python, foi considerada mas omitida para manter o foco e a consistência metodológica.

# 9. Análise dos Resultados e Conclusões

## 9.1 Análise dos Resultados

O Movimento Browniano Geométrico nos permitiu gerar dados sintéticos que mantêm muitas das propriedades estatísticas dos dados reais. Observamos:

1.  **Distribuição dos Retornos**: Os retornos sintéticos apresentam distribuições semelhantes às dos dados reais, com caudas gordas típicas de séries financeiras.

2.  **Correlações entre Ativos**: O modelo preserva as correlações entre os diferentes ativos, aspecto crucial para a diversificação do portfólio.

3.  **Volatilidade Realista**: Os preços sintéticos apresentam níveis de volatilidade semelhantes aos observados nos dados históricos.

4.  **Otimização de Portfólio**: A alocação ótima calculada com dados sintéticos se aproxima da alocação calculada com dados reais, validando a qualidade dos dados gerados.

## 9.2 Limitações do Método Escolhido

Embora o MBG seja adequado para nosso propósito, é importante reconhecer suas limitações:

-   Não captura mudanças abruptas de volatilidade ou choques de mercado
-   Assume volatilidade constante ao longo do tempo
-   Não incorpora efeitos de autocorrelação ou sazonalidade
-   Assume que os retornos seguem uma distribuição normal, o que nem sempre é verificado em dados financeiros reais

Para análises mais sofisticadas, métodos como o Processo de Heston ou modelos baseados em aprendizado profundo poderiam ser considerados, apesar da maior complexidade computacional.

## 9.3 Conclusão

O Movimento Browniano Geométrico oferece um equilíbrio adequado entre simplicidade de implementação e qualidade dos dados sintéticos gerados, sendo suficiente para nossas análises de portfólio. A implementação realizada nos permite gerar cenários sintéticos que mantêm as principais características estatísticas dos dados reais, possibilitando análises de otimização e simulações de diferentes cenários de mercado.

Este método pode ser particularmente útil em situações onde:

1.  Dados históricos são insuficientes ou contêm muitos valores ausentes
2.  Desejamos testar estratégias de investimento em cenários hipotéticos
3.  Precisamos garantir a privacidade dos dados reais
4.  Queremos gerar múltiplos cenários para análise de risco

No entanto, para aplicações que exijam maior precisão ou para a captura de dinâmicas mais complexas do mercado, pode ser necessário recorrer a métodos mais sofisticados como os discutidos na tabela comparativa.
