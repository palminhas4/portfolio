---
title: "Análise de Carteira de Investimentos"
author: "Equipe de Análise"
date: "2025-04-04"
format: 
  html:
    code-fold: true
    toc: true
    fig-width: 10
    fig-height: 6
execute:
  echo: true
  warning: false
---

# Análise de Carteira de Investimentos - Semana 1

## Introdução

Neste projeto, analisaremos uma carteira de investimentos composta por seis empresas líderes de tecnologia. A seleção foi feita com base na relevância destas empresas no setor tecnológico, sua capitalização de mercado e potencial de crescimento.

## Seleção de Empresas

Nossa carteira é composta pelos seguintes ativos:

1. **NVDA** (NVIDIA Corporation)
2. **AAPL** (Apple Inc.)
3. **TSLA** (Tesla, Inc.)
4. **META** (Meta Platforms, Inc.)
5. **AMZN** (Amazon.com, Inc.)
6. **MSFT** (Microsoft Corporation)

## Justificativa da Escolha

A carteira foi estruturada com base nos seguintes critérios:

- **Diversificação dentro do setor tecnológico**: Embora todas sejam empresas de tecnologia, cada uma atua em segmentos distintos - hardware, software, redes sociais, comércio eletrônico, veículos elétricos e inteligência artificial.
  
- **Exposição à inovação**: Todas as empresas selecionadas investem fortemente em pesquisa e desenvolvimento, com foco em tecnologias emergentes como inteligência artificial, realidade aumentada, computação em nuvem e veículos autônomos.
  
- **Liderança de mercado**: Todas são líderes em seus respectivos segmentos, com forte presença global e vantagens competitivas significativas.
  
- **Potencial de crescimento**: Apesar de já serem empresas consolidadas, continuam apresentando perspectivas de crescimento em novos mercados e através de inovações disruptivas.

## Coleta de Dados

Para este projeto, utilizaremos o pacote `quantmod` em R para coletar os dados históricos de preços das ações selecionadas. Vamos coletar dados dos últimos 2 anos:

```{r}
# Carregando as bibliotecas necessárias
library(quantmod)
library(ggplot2)
library(dplyr)
library(tidyr)
library(corrplot)
library(RColorBrewer)
library(scales)

# Definindo os tickers da nossa carteira
tickers <- c("NVDA", "AAPL", "TSLA", "META", "AMZN", "MSFT")

# Definindo o período de análise (últimos 2 anos)
end_date <- Sys.Date()
start_date <- end_date - 365*2

# Configurando o ambiente gráfico
options(repr.plot.width = 12, repr.plot.height = 8)

# Função para adicionar sufixo ao ticker para Yahoo Finance
add_yahoo_suffix <- function(ticker) {
  return(paste0(ticker, ".US"))
}

# Coletando dados históricos
getSymbols(tickers, src = "yahoo", from = start_date, to = end_date)

# Exibindo as primeiras linhas dos dados da NVIDIA como exemplo
head(NVDA)
```

## Preparação dos Dados

Vamos organizar os dados para facilitar as análises:

```{r}
# Função para extrair preços de fechamento ajustados
get_adjusted_prices <- function(ticker) {
  return(Ad(get(ticker)))
}

# Criando um dataframe com os preços de fechamento ajustados
closing_prices <- do.call(merge, lapply(tickers, get_adjusted_prices))
colnames(closing_prices) <- tickers

# Visualizando as primeiras linhas
head(closing_prices)

# Convertendo para dataframe para facilitar algumas manipulações
closing_prices_df <- as.data.frame(closing_prices)
closing_prices_df$date <- as.Date(rownames(closing_prices_df))
```

## Análise da Evolução dos Preços

Vamos visualizar a evolução dos preços de fechamento ajustados para cada ativo ao longo do tempo:

```{r}
# Transformando os dados para o formato longo (tidy)
prices_long <- closing_prices_df %>%
  pivot_longer(cols = all_of(tickers), 
               names_to = "symbol", 
               values_to = "price")

# Plotando os preços de fechamento ajustados
ggplot(prices_long, aes(x = date, y = price, color = symbol)) +
  geom_line(linewidth = 1) +
  labs(title = "Preços de Fechamento Ajustados",
       x = "Data", 
       y = "Preço ($)",
       color = "Ticker") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    axis.title = element_text(size = 12),
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10)
  ) +
  scale_y_continuous(labels = dollar_format())
```

Para facilitar a comparação entre os ativos, vamos normalizar os preços para base 100:

```{r}
# Calculando preços normalizados
first_prices <- closing_prices_df[1, tickers]
normalized_prices <- closing_prices_df

for (ticker in tickers) {
  normalized_prices[[ticker]] <- closing_prices_df[[ticker]] / first_prices[[ticker]] * 100
}

# Transformando para o formato longo
normalized_long <- normalized_prices %>%
  pivot_longer(cols = all_of(tickers), 
               names_to = "symbol", 
               values_to = "normalized_price")

# Plotando os preços normalizados
ggplot(normalized_long, aes(x = date, y = normalized_price, color = symbol)) +
  geom_line(linewidth = 1) +
  labs(title = "Preços Normalizados (Base 100)",
       x = "Data", 
       y = "Preço Normalizado",
       color = "Ticker") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    axis.title = element_text(size = 12),
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10)
  )
```

## Análise de Retornos

Vamos calcular e visualizar os retornos diários, bem como algumas estatísticas importantes:

```{r}
# Calculando retornos diários
returns <- ROC(closing_prices, type = "discrete", n = 1)
returns <- returns[-1,]  # Removendo a primeira linha (NA)

# Exibindo estatísticas descritivas
returns_stats <- data.frame(
  Ticker = tickers,
  Mínimo = apply(returns, 2, min, na.rm = TRUE),
  Q1 = apply(returns, 2, function(x) quantile(x, 0.25, na.rm = TRUE)),
  Mediana = apply(returns, 2, median, na.rm = TRUE),
  Média = apply(returns, 2, mean, na.rm = TRUE),
  Q3 = apply(returns, 2, function(x) quantile(x, 0.75, na.rm = TRUE)),
  Máximo = apply(returns, 2, max, na.rm = TRUE),
  Volatilidade_Diária = apply(returns, 2, sd, na.rm = TRUE),
  Volatilidade_Anual = apply(returns, 2, sd, na.rm = TRUE) * sqrt(252)
)

# Formatando os números para percentuais
returns_stats[, 2:9] <- round(returns_stats[, 2:9] * 100, 2)

# Exibindo estatísticas
knitr::kable(returns_stats, caption = "Estatísticas dos Retornos Diários (%)")
```

### Distribuição dos Retornos

Vamos visualizar a distribuição dos retornos diários para cada ativo:

```{r fig.height=8}
# Convertendo returns para dataframe
returns_df <- as.data.frame(returns)
returns_df$date <- as.Date(rownames(returns_df))

# Transformando para o formato longo
returns_long <- returns_df %>%
  pivot_longer(cols = all_of(tickers), 
               names_to = "symbol", 
               values_to = "return")

# Plotando histogramas dos retornos
ggplot(returns_long, aes(x = return)) +
  geom_histogram(aes(y = ..density..), bins = 30, fill = "steelblue", alpha = 0.7) +
  geom_density(color = "red", linewidth = 1) +
  geom_vline(aes(xintercept = mean(return, na.rm = TRUE)), 
             color = "darkred", linetype = "dashed", linewidth = 1) +
  facet_wrap(~symbol, scales = "free_y", ncol = 2) +
  labs(title = "Distribuição dos Retornos Diários",
       x = "Retorno Diário", 
       y = "Densidade") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    axis.title = element_text(size = 12),
    strip.text = element_text(size = 12, face = "bold")
  ) +
  scale_x_continuous(labels = percent_format())
```

## Análise de Correlação

Vamos analisar a correlação entre os retornos das ações para entender como esses ativos se movimentam em relação uns aos outros:

```{r}
# Calculando a matriz de correlação
correlation_matrix <- cor(returns, use = "complete.obs")

# Visualizando a matriz de correlação
corrplot(correlation_matrix, method = "color", 
         type = "upper", order = "hclust", 
         addCoef.col = "black", 
         tl.col = "black", tl.srt = 45,
         col = brewer.pal(n = 8, name = "RdYlBu"),
         title = "Matriz de Correlação dos Retornos Diários",
         mar = c(0,0,2,0))
```

## Análise de Risco e Retorno

Vamos comparar o risco (volatilidade) e o retorno médio anualizado de cada ativo:

```{r}
# Calculando retornos médios anualizados e volatilidade anualizada
mean_return <- colMeans(returns, na.rm = TRUE) * 252
volatility <- apply(returns, 2, sd, na.rm = TRUE) * sqrt(252)

# Criando um dataframe para visualização
risk_return <- data.frame(
  Ticker = tickers,
  Retorno_Anualizado = mean_return,
  Volatilidade = volatility
)

# Exibindo a tabela
knitr::kable(risk_return, digits = 4, 
             col.names = c("Ticker", "Retorno Anualizado", "Volatilidade"),
             caption = "Análise de Risco-Retorno")
```

### Gráfico de Risco x Retorno

```{r}
# Calculando médias para divisão dos quadrantes
avg_ret <- mean(risk_return$Retorno_Anualizado)
avg_vol <- mean(risk_return$Volatilidade)

# Criando o gráfico de risco x retorno
ggplot(risk_return, aes(x = Volatilidade, y = Retorno_Anualizado)) +
  geom_point(aes(color = Ticker), size = 5) +
  geom_text(aes(label = Ticker), hjust = -0.3, vjust = 0, size = 4) +
  geom_hline(yintercept = avg_ret, linetype = "dashed", color = "red", alpha = 0.5) +
  geom_vline(xintercept = avg_vol, linetype = "dashed", color = "red", alpha = 0.5) +
  annotate("text", x = avg_vol * 1.05, y = avg_ret * 1.05, 
           label = "Alto Retorno\nAlto Risco", 
           hjust = 0, vjust = 0, size = 3.5) +
  annotate("text", x = avg_vol * 0.95, y = avg_ret * 1.05, 
           label = "Alto Retorno\nBaixo Risco", 
           hjust = 1, vjust = 0, size = 3.5) +
  annotate("text", x = avg_vol * 1.05, y = avg_ret * 0.95, 
           label = "Baixo Retorno\nAlto Risco", 
           hjust = 0, vjust = 1, size = 3.5) +
  annotate("text", x = avg_vol * 0.95, y = avg_ret * 0.95, 
           label = "Baixo Retorno\nBaixo Risco", 
           hjust = 1, vjust = 1, size = 3.5) +
  labs(title = "Análise de Risco x Retorno",
       x = "Risco (Volatilidade Anualizada)", 
       y = "Retorno Médio Anualizado",
       color = "Ticker") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    axis.title = element_text(size = 12),
    legend.position = "top"
  ) +
  scale_y_continuous(labels = percent_format()) +
  scale_x_continuous(labels = percent_format())
```

## Análise de Desempenho Cumulativo

Vamos calcular e visualizar o retorno cumulativo para cada ativo:

```{r}
# Calculando retorno cumulativo
cumulative_returns <- cumprod(1 + returns) - 1

# Convertendo para dataframe
cumret_df <- as.data.frame(cumulative_returns)
cumret_df$date <- as.Date(rownames(cumret_df))

# Transformando para o formato longo
cumret_long <- cumret_df %>%
  pivot_longer(cols = all_of(tickers), 
               names_to = "symbol", 
               values_to = "cum_return")

# Plotando retorno cumulativo
ggplot(cumret_long, aes(x = date, y = cum_return, color = symbol)) +
  geom_line(linewidth = 1) +
  labs(title = "Retorno Cumulativo",
       x = "Data", 
       y = "Retorno Cumulativo",
       color = "Ticker") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    axis.title = element_text(size = 12),
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10)
  ) +
  scale_y_continuous(labels = percent_format())
```

## Volume de Negociação

Vamos analisar o volume de negociação para cada ativo:

```{r}
# Função para extrair volume
get_volume <- function(ticker) {
  return(Vo(get(ticker)))
}

# Obtendo dados de volume
volumes <- do.call(merge, lapply(tickers, get_volume))
colnames(volumes) <- tickers

# Calculando volume médio diário
avg_volume <- colMeans(volumes, na.rm = TRUE)
avg_volume_df <- data.frame(
  Ticker = tickers,
  Volume_Medio = avg_volume
)

# Ordenando por volume
avg_volume_df <- avg_volume_df[order(avg_volume_df$Volume_Medio, decreasing = TRUE), ]
avg_volume_df$Ticker <- factor(avg_volume_df$Ticker, levels = avg_volume_df$Ticker)

# Plotando o volume médio de negociação
ggplot(avg_volume_df, aes(x = Ticker, y = Volume_Medio / 1e6)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_text(aes(label = sprintf("%.1f M", Volume_Medio / 1e6)), 
            vjust = -0.5, size = 4) +
  labs(title = "Volume Médio Diário de Negociação",
       x = "Ticker", 
       y = "Volume Médio (Milhões)") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    axis.title = element_text(size = 12),
    axis.text.x = element_text(size = 10, angle = 0)
  )
```

## Análise de Volatilidade ao Longo do Tempo

Vamos calcular a volatilidade móvel para analisar como a volatilidade de cada ativo evolui ao longo do tempo:

```{r}
# Função para calcular volatilidade móvel
calculate_rolling_vol <- function(returns_xts, window_size = 30) {
  roll_vol <- rollapply(returns_xts, width = window_size, 
                        FUN = function(x) sd(x, na.rm = TRUE) * sqrt(252),
                        by.column = TRUE, align = "right")
  return(roll_vol)
}

# Calculando volatilidade móvel (janela de 30 dias)
rolling_vol <- calculate_rolling_vol(returns, window_size = 30)

# Convertendo para dataframe
roll_vol_df <- as.data.frame(rolling_vol)
roll_vol_df$date <- as.Date(rownames(roll_vol_df))

# Transformando para o formato longo
roll_vol_long <- roll_vol_df %>%
  pivot_longer(cols = all_of(tickers), 
               names_to = "symbol", 
               values_to = "volatility")

# Plotando a volatilidade móvel
ggplot(roll_vol_long, aes(x = date, y = volatility, color = symbol)) +
  geom_line(linewidth = 1) +
  labs(title = "Volatilidade Móvel (30 dias)",
       x = "Data", 
       y = "Volatilidade Anualizada",
       color = "Ticker") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    axis.title = element_text(size = 12),
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10)
  ) +
  scale_y_continuous(labels = percent_format())
```

## Análise de Sharpe Ratio

O Índice Sharpe é uma medida importante que ajuda a avaliar o retorno ajustado ao risco:

```{r}
# Assumindo taxa livre de risco de 4% ao ano
risk_free_rate <- 0.04/252

# Calculando Sharpe Ratio para cada ativo
sharpe_ratio <- (colMeans(returns, na.rm = TRUE) - risk_free_rate) / 
                 apply(returns, 2, sd, na.rm = TRUE) * sqrt(252)

sharpe_df <- data.frame(
  Ticker = tickers,
  Sharpe_Ratio = sharpe_ratio
)

# Ordenando por Sharpe Ratio
sharpe_df <- sharpe_df[order(sharpe_df$Sharpe_Ratio, decreasing = TRUE), ]
sharpe_df$Ticker <- factor(sharpe_df$Ticker, levels = sharpe_df$Ticker)

# Plotando o Sharpe Ratio
ggplot(sharpe_df, aes(x = Ticker, y = Sharpe_Ratio)) +
  geom_bar(stat = "identity", fill = "darkgreen") +
  geom_text(aes(label = sprintf("%.2f", Sharpe_Ratio)), 
            vjust = -0.5, size = 4) +
  labs(title = "Índice de Sharpe (Anualizado)",
       subtitle = "Taxa livre de risco = 4%",
       x = "Ticker", 
       y = "Sharpe Ratio") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12),
    axis.title = element_text(size = 12),
    axis.text.x = element_text(size = 10, angle = 0)
  )
```

## Próximos Passos

Na próxima etapa do projeto, iremos:

1. Realizar uma análise mais aprofundada do desempenho histórico desses ativos
2. Calcular métricas adicionais como Sortino Ratio e Maximum Drawdown
3. Otimizar a alocação de ativos usando técnicas como a Teoria Moderna de Portfólio
4. Realizar backtesting de diferentes estratégias de rebalanceamento
5. Analisar a exposição da carteira a diferentes fatores de risco

## Conclusões Preliminares

Com base nas análises realizadas, podemos destacar os seguintes pontos:

1. **Desempenho**: Observamos diferenças significativas no desempenho dos ativos selecionados, com alguns apresentando retornos superiores à média do grupo.

2. **Correlação**: A matriz de correlação mostra que, apesar de todas serem empresas de tecnologia, há diversificação significativa dentro da carteira.

3. **Risco-Retorno**: O gráfico de risco x retorno nos permite identificar quais ativos oferecem melhor relação entre retorno e volatilidade.

4. **Volatilidade**: A análise de volatilidade móvel mostra períodos de maior e menor instabilidade no mercado, afetando todos os ativos.

5. **Eficiência**: A análise do Índice de Sharpe revela quais ativos oferecem melhor retorno ajustado ao risco.

Esta análise preliminar nos dá uma base para entender o comportamento dos ativos selecionados e a dinâmica entre eles, orientando nossas decisões futuras de investimento.